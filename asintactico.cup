 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package arm.compiler;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
	ManejadorErrores moduloErrores = new ManejadorErrores();
	
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
	
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                if (s.right >= 0){
					moduloErrores.setErrorSintactico((s.left+1), (s.right+1));
					}
            }
        }
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info); 
    }


    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
        } catch (Exception ex) {
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal            COMA, LLAVEDER, LLAVEIZQ, REGISTRO, VECTOR, ETIQUETA, NUMERAL,
					AND, EOR, EORV, SUB,SUBV, RSB, ADD,ADDV, ADC, SBC, RSC, ORR, MVN, BIC, MUL, CMP, 
					CMN, MOV,MOVV, LSL ,LSLV,LSRV, ASR, RRX, ROR,RORV,ROLV, MLA, STR, STRV, LDR, LDRV,STRB, LDRB, B, BEQ, BNE, BGT, BLT;
terminal Integer   DECIMAL;
   
/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */
non terminal Object     expr_list, inmediato, instruccion1, instruccionN, empty, terminoMemoria, label,
						dosRegistros, tresRegistros, cuatroRegistros, unRegistroImm,unVector , unVectorImm, dosRegistrosImm, unRegistro , dosVectores,dosVectoresImm,tresVectores, unVectorcuatroImm;   


/* ------------------- Seccion de la gramatica ------------------------ */

expr_list ::= instruccion1 instruccionN;
instruccionN ::= expr_list | empty;

instruccion1 ::= 
				AND tresRegistros | AND dosRegistrosImm |
				EOR tresRegistros | EOR dosRegistrosImm |
				EORV tresVectores |
				SUB tresRegistros | SUB dosRegistrosImm |
				SUBV tresVectores |				
				RSB tresRegistros | RSB dosRegistrosImm |
				ADD tresRegistros | ADD dosRegistrosImm |
				ADDV tresVectores |
				ADC tresRegistros | ADC dosRegistrosImm |
				SBC tresRegistros | SBC dosRegistrosImm |
				RSC tresRegistros | RSC dosRegistrosImm |
				ORR tresRegistros | ORR dosRegistrosImm |
				MVN dosRegistros  | MVN unRegistroImm |
				BIC tresRegistros | BIC dosRegistrosImm |
				MUL tresRegistros | 
				CMP dosRegistros  | CMP unRegistroImm |
				CMN dosRegistros  | CMN unRegistroImm |
				MOV dosRegistros  | MOV unRegistroImm |
				MOVV dosVectores  | MOVV unVectorImm  |
				MOVV unVectorcuatroImm |
				LSL tresRegistros | LSL dosRegistrosImm |
				LSLV dosVectoresImm |
				LSRV dosVectoresImm |
				ASR tresRegistros | ASR dosRegistrosImm |
				RRX dosRegistros  | 
				ROR tresRegistros | ROR dosRegistrosImm |
				RORV dosVectoresImm | 
				ROLV dosVectoresImm | 
				MLA cuatroRegistros |
				STR unRegistro terminoMemoria |
				LDR unRegistro terminoMemoria |
				STRV unVector terminoMemoria  |
				LDRV unVector terminoMemoria  |
				STRB unRegistro terminoMemoria |
				LDRB unRegistro terminoMemoria |
				B ETIQUETA |
				BEQ ETIQUETA |
				BNE ETIQUETA |
				BGT ETIQUETA |
				BLT ETIQUETA |
				label
				;
				
dosRegistros ::= REGISTRO COMA REGISTRO;
tresVectores ::= VECTOR COMA VECTOR COMA VECTOR;
dosVectores ::= VECTOR COMA VECTOR;
tresRegistros ::= REGISTRO COMA REGISTRO COMA REGISTRO;
cuatroRegistros ::= REGISTRO COMA REGISTRO COMA REGISTRO COMA REGISTRO;
dosRegistrosImm ::= REGISTRO COMA REGISTRO COMA inmediato;
dosVectoresImm ::= VECTOR COMA VECTOR COMA inmediato;
unRegistroImm ::= REGISTRO COMA inmediato;
unVectorImm ::= VECTOR COMA inmediato;
unVectorcuatroImm ::= VECTOR COMA inmediato COMA inmediato COMA inmediato COMA inmediato ;
unRegistro ::= REGISTRO COMA;
unVector ::= VECTOR COMA;
terminoMemoria ::= LLAVEIZQ REGISTRO COMA REGISTRO LLAVEDER | LLAVEIZQ REGISTRO COMA inmediato LLAVEDER;
inmediato ::= NUMERAL DECIMAL;
empty ::= /* nothing */;
label ::= ETIQUETA;
